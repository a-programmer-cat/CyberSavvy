import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// Resolve __dirname in ES Module
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Directories
const MODULES_DIR = path.resolve(__dirname, '../public/modules');
const OUTPUT_FILE = path.resolve(__dirname, '../src/constants/modules.ts');

// Helpers
const extractTitleFromFilename = (filename) => {
  const match = filename.match(/^\d+-(.+?)\.(en|ms|zh)\.md$/);
  if (!match) return '';
  return match[1].replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
};

// Build module list
const generateModules = () => {
  const moduleDirs = fs.readdirSync(MODULES_DIR).filter((dir) =>
    fs.statSync(path.join(MODULES_DIR, dir)).isDirectory()
  );

  const modules = moduleDirs.map((moduleId) => {
    const modulePath = path.join(MODULES_DIR, moduleId);
    const files = fs.readdirSync(modulePath);
    const sectionFiles = files.filter(f => /^\d+-.*\.(en|ms|zh)\.md$/.test(f));

    const sectionIds = Array.from(new Set(
      sectionFiles.map(f => f.match(/^(\d+-[^.]+)\./)?.[1])
    )).filter(Boolean);

    const sections = sectionIds.map(sectionId => ({
      id: sectionId,
      titleGuess: extractTitleFromFilename(sectionId + '.en.md'),
    }));

    return {
      id: moduleId,
      basePath: `/modules/${moduleId}/`,
      sections
    };
  });

  const output = `// Auto-generated by scripts/generateModules.mjs

export const modules = ${JSON.stringify(modules, null, 2)} as const;
`;

  // Ensure directory exists
  fs.mkdirSync(path.dirname(OUTPUT_FILE), { recursive: true });

  fs.writeFileSync(OUTPUT_FILE, output, 'utf-8');
  console.log(`âœ… modules.ts generated at: ${OUTPUT_FILE}`);
};

generateModules();
